#include<iostream>
#include "SFML/Graphics.hpp"
using namespace std;

enum directions {LEFT,RIGHT,UP,DOWN};
int main() {
    //game set up (you'll need these lines in every game)
    sf::RenderWindow screen(sf::VideoMode(1000, 1000), "paclol"); //set up screen
    sf::Event event; //set up event queue
    sf::Clock clock; //set up the clock (needed for game timing)
    const float FPS = 60.0f; //FPS
    screen.setFramerateLimit(FPS); //set FPS

    //load in images
    sf::Texture brick;
    brick.loadFromFile("Yellow.png");
    sf::Sprite wall;
    wall.setTexture(brick);
/*
    sf::Texture pacman;
    pacman.loadFromFile("pacman.png");
    sf::IntRect pac(0, 0, 70, 70);
    sf::Sprite playerImg(pacman, pac);*/

    int map[25][25] = {
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
        1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
        1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
        1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
        1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
        1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
        1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
        1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
        1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,1,
        1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
        1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
        1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
        1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
        1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
        1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
        1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
        1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
        1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
        1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
        1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
        1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
        1,0,1,1,1,1,1,1,0,1,1,0,1,0,1,1,0,1,1,1,1,1,1,0,1,
        1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
    };
    //player setup
    int xpos = 200;
    int ypos = 200;
    int vx = 0;
    int vy = 0;
    int radius = 20;
    sf::CircleShape player(radius);
    sf::CircleShape dot(5);
    
    player.setFillColor(sf::Color(0, 250, 0)); //using RGB value for color here (hex also works)
    player.setPosition(xpos, ypos); //top left "corner" of circle (not center!)
    bool keys[] = { false, false, false, false };
    //################### HOLD ONTO YOUR BUTTS, ITS THE GAME LOOP###############################################################
    while (screen.isOpen()) {//keep window open until user shuts it down

        while (screen.pollEvent(event)) { //look for events-----------------------

            //this checks if the user has clicked the little "x" button in the top right corner
            if (event.type == sf::Event::EventType::Closed)
                screen.close();

            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Left)) {
                keys[LEFT] = true;
            }
            else keys[LEFT] = false;

            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Right)) {
                keys[RIGHT] = true;
            }
            else keys[RIGHT] = false;

            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Up)) {
                keys[UP] = true;
            }
            else keys[UP] = false;

            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Down)) {
                keys[DOWN] = true;
            }
            else keys[DOWN] = false;
        }//end event loop---------------------------------------------------------------
        if (keys[LEFT] == true)
            vx = -5;
        else if (keys[RIGHT] == true)
            vx = 5;
        else {
            vx = 0;
        }

        if (keys[UP] == true)
            vy = -5;
        else if (keys[DOWN] == true)
            vy = 5;

        else {
            vy = 0;
        }
        

        

        if (vx > 0 &&
           ((map[(ypos + 3) / 40][(xpos + (radius * 2 + 3)) / 40] == 1) ||
                (map[(ypos + (radius * 2) - 3) / 40]
                    [(xpos + (radius * 2) + 3) / 40] == 1))) {//right collision
            vx = 0;
            cout << "right";
           
        }
        if (vx < 0 &&
            ((map[(ypos + 3) / 40][(xpos - 3) / 40] == 1) ||
                (map[(ypos + radius * 2 - 3) / 40]
                    [(xpos - 3) / 40] == 1))) {//left collision
            vx = 0;
            cout << "left";
            
        }
        if (vy > 0 &&
            ((map[(ypos + (radius * 2) + 3) / 40][(xpos + 3) / 40] == 1) ||
                (map[(ypos + (radius * 2)) / 40]
                    [(xpos +  (radius * 2) - 3) / 40] == 1))) {//bottom collision
            vy = 0;
            cout << "bottom";
           
        }
        if (vy < 0 &&
            ((map[(ypos - 3) / 40][(xpos + 3)/40] == 1) ||
                (map[(ypos - 3) / 40]
                    [(xpos + radius * 2 - 3) / 40] == 1))) {//top collision
            vy = 0;
            cout << "top";
            
        }
        xpos += vx;
        ypos += vy;
        player.setPosition(xpos, ypos);
                //render section-----------------------------------------
        screen.clear(); //wipes screen, without this things smear
        for (int rows = 0; rows < 25; rows++)
            for (int cols = 0; cols < 25; cols++) {
                if (map[rows][cols] == 1) {
                    wall.setPosition(cols * 40, rows * 40);
                    screen.draw(wall);
                }
            }
        screen.draw(player); //draw player
        screen.display(); //flips memory drawings onto screen

    }//######################## end game loop ###################################################################################

    cout << "goodbye!" << endl;
} //end of main
